[x] Money is value object
[x] Money is struct
[x] Money.Zero
[x] Money private constructor
[x] Money ignore decimals
[x] Money factors are private
[x] Money has never negative factors
[x] Money is comparable
[x] Prefix are comparable

[?] Money creates factors on the fly
[/] Money.From(double.MaxValue) does not fail
[ ] Symbols are not extensively defined
[?] NextSymbol
[?] PrevSymbol
[ ] SymbolBase10

[x] Money{1k}.ToString() == "1k"
[x] Money{1k + 400}.ToString() == "1.4k"
[x] Money{1k + 450}.ToString() == "1.45k"
[x] Money{1k + 405}.ToString() == "1.4k"
[x] Money{100k}.ToString() == "100k"
[x] Money{100k + 500}.ToString() == "100k"

[x] Money.From(string) --> opposed as ToString()
[x] Money.From(wrong prefix) --> ArgumentException
[x] Money.From(wrong number) --> FormatException
[x] Money.From(empty) --> FormatException
[x] Money.From("1.3k") == Money{1.3k}
[x] Money.From("6") == Money{6}

[x] Money{1} <-> 1.0
[x] Money{1} == Money{1}    (equality operator)
[x] Money{0} == Money.Zero  (equality operator)
 
[x] Money.From(1500) == 1500
[x] Money{1k + 400} == 1400d
[x] Money{1k} + Money{400} <-> 1400.0
[x] Money{1k} + Money{400} == Money{1k + 400}

[x] Money{x} - Money{y} == Money{x-y} (x >= y)
[x] Money{x} - Money{x} == Money.Zero


[x] Money{x} * 0 == Money{0} 

[x] Money.Zero + Money{x} == Money{x} (identity element)
[x] Money{0} * x == Money{0} (absorbing element)

[x] Money{5} * 2 == Money{10}
[x] Money{1} + Money{2} == Money{3}
[x] Money{x} + Money{x} <-> Money{x} * 2
[x] Money{1k + 400} * 2 <-> Money{1k} * 2 + Money{400} * 2 == Money{2k + 800}
[x] Money{1k + 600} * 2 == Money{3k + 200}
 
[x] Money{1k}.Factor() == [Money{1k}]
[x] Money{20M + 2k}.Factor() == [Money{20M}, Money{2k}]

[x] Money.Zero.Round == Money.Zero
[x] Money{1k}.Round == Money{1k}
[x] Money{1k + 809}.Round == Money{1k}
[x] Money{45M + 7}.Round == Money{45M}
[ ] Set to 2 factors rounding?

[x] Factory method with prefix
[x] Money.From(1, "k") == Money{1k}
[x] Money.From(9, "") == Money{9}
[x] Money.From(3.54, "M") == Money{3M + 540k}
[x] Money.From(8.66, "") == Money{8}

[x] Money.From(1, " ") --> NotSupportedException
[x] Money.From(1, "x") --> NotSupportedException
[x] Money.From(1, "b") --> NotSupportedException

[x] Money{-x} --> ArgumentOutOfIndexException
[x] Money{1} - Money {2} --> InvalidOperationException
[x] Money{1} * -x --> InvalidOperationException
[x] Money.Zero * -x --> Money.Zero

